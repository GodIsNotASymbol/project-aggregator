
-----TODO(project-aggregator)-----------------------------------
- Development stalled for now. It only works when running the commands on the host machine.
-----DONE(project-aggregator)------------------------------------------
- Write Dockerfile
- Removed sidebar
- Hacer que la viewItem tenga cards en vez de que este el titulo la imagen y el texto suelto.
- Hacer que el boton Back de viewItem tenga un border y una card alrededor. text-decoration: none y que en hover sea de color azul.
- Completar about us. Ponerle una card al inner frame
- Hacer como cartas para cada una de las publicaciones hechas en la pagina principal
- Hacer el diagrama entidad relacion y publicarlo como parte de la documentacion
- Poner en la barra un boton que cambie de mainPageView a editItemView [CANCELLED]
- Reescribir todas las views como para que usen Pebble en vez de Thymeleaf
- Cambiar la template engine de Thymeleaf a Pebble
- poner edit al costado de los titulos en modo edicion [CANCELLED]
- // TODO Must delete the old photo for the item edition before publishing the new one
- Hacer pagina editItem, que tenga todos los campos titulo, descripcion e imagen para editarse
- La pagina del create tiene que tener un boton back
- Si pongo la pagina createAndEdit sin nada, tiene que redireccionar a la que tiene ?page=1
- After the login button has been pressed, there must be a redirect to a page that has create and edit --> called create&Edit
- Implementar que las paginas de edit y create solo se puede acceder con Rol admin 
- login page has to have username and password fields managed and connected to the backend by a submit button and a post request [CANCELED]
- Use the out of the box spring boot authentication [MASOMENOS, parece que usa el user y pass de la base de datos]
- make login page: Why doesn't it work? Input into chatGPT the following... [CANCELED]
- Implementar Login, autenticacion y autorizacion
- Implementar pagina de login, implementar roles, que roles pueden ver que paginas
- LOgin backend video
- Register video
- finish Spring Boot Security - Users & Roles video https://youtu.be/YkA4cunsU9g?list=PL82C6-O4XrHe3sDCodw31GjXbwRdCyyuY https://www.youtube.com/watch?v=HyoLl3VcRFY
- Hacer que la pagina del create use una Form en vez de cosas sueltas
- Hacer que en la view del item no se pase el max width ni el max height
- Evitar que se guarde cualquier cosa si no se sube una foto
- Implementar subir y guardar la foto en el sistema en la carpeta uploads/photos, y hacer la entidad relacionada al item correspondiente
- Implementar el controller PostMapping que guarde el valor de textarea en item description y title en la tabla item
- Implementar la ajax call que tome el valor de la textarea y del input, y lo pase al controller PostMapping
- Agregar un <a> que lleve a la pagina de donde se clickeo, desde el viewItem
- Agregar al titulo e imagenes de la pagina principal un link que los lleve a la pagina particular, y una manito que muestre que puede ser asi
- Crear una pagina especifica por item, hacer un controller. Tiene que tener el titulo, foto y descripcion del item, 
- Crear mainPageItemDto que tenga todo lo necesario para mostrar en la pagina principal-> Titulo, Foto
- asegurarse que no queden rezagos del hardcodeo que hice antes sobre los titulos y las fotos
- Cambiar los nombres de las fotos en la base de datos a butterfly.jpeg
- Cambiar item que el tipo de description sea el correcto, y agregar tambien title varchar 255
- Remover la descripcion en la pagina principal
- Usar un service para levantar las fotos de la carpeta uploads/photos, y devolverlas como base64
- Usar un service para levantar las fotos como entidad relacionadas a un item en particular
- Hacer Modelo entidad relacion para las fotos
- Hacer la pagina principal, ahora mejor vista, con paginado
- Implementar botones de paginado con bootstrap
- Implemente redirect desde la pagina "/" a la paginada
- Hacer que la pagina principal reciba un numero de pagina como requestParam, y que devuelva los items segun ese numero de pagina.
- Hacer el paginado, que traiga de a 3 Items
- Agregarle un color de fondo al html
- Hacer la pagina principal, solo con algunas descripciones y html que las encuadre
- Trasladar las variables hardcodeadas al controller, y hacer que sea un simulacro de tomar elementos de la lista y meterlos en la pagina principal
- Tal vez hacer que sea single column en vez de double, y usar el th:each
- Aprender lo de bootstrap las columnas y las filas, y ver si puedo ponerlas al centro de la pagina
- Agregue Bootstrap al frontend, inherited from the header and sidebar
- Ya puedo traer elementos desde la base de datos usando el patron Repository
- Pude conectar la base de datos, era que el puerto en el docker estaba abierto el 3307 no el 3306
- Arregladas las dependencias y maven instalo las JPA annotations como para hacer el modelo entidad relacion
- Hacer el css como para que main page este por debajo y al costado del header y de la sidebar. En cada pagina que voy a usar el template, tambien voy a usar el css
- Hacer que el template sea inheritable
- Entender como funciona Thymeleaf e inyectar algunas variables desde el controller
- Hacer un template con header y barra al costado.
- Poner todo en un mismo controller
- Correr un controller de test, Hello World
- Bajar Spring Boot y configurar la ide con JetBrains IDEA


------Project Agregator Description-------
Project Aggregator is a private e-commerce/vlog webpage developed using the Java Spring Boot framework ecosystem.
The technologies used to develop the webpage include: Spring Security, Spring Boot MVC, the Pebble template engine, Mysql, Docker, 
Bootstrap.

-----------------------------------------------------------------
- https://java-programming.mooc.fi/
